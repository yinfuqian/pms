{"version":3,"file":"timeZone-1900-2050.js","sources":["../src/plugin/timeZone/custom.js","../src/plugin/timeZone/1900-2050.js","../src/constant.js"],"sourcesContent":["import { findTimeZone, setTimeZone, getZonedTime } from 'timezone-support/dist/lookup-convert'\nimport { FORMAT_DEFAULT } from '../../constant'\n\nfunction updateTime(instance, {\n  year, month, day, dayOfWeek, hours, minutes, epoch, zone\n}, convertTimeZone) {\n  const date = instance.$d\n  // Update the Date object with the epoch time from the date\n  // after applying the specified time zone on it.\n  date.setTime(epoch)\n  if (convertTimeZone) {\n    // If the date was converted to a specified time zone for formatting\n    // purposes, replace date parts from the zoned time object.\n    instance.$Y = year\n    instance.$M = month - 1\n    instance.$D = day\n    instance.$W = dayOfWeek\n    instance.$H = hours\n    instance.$m = minutes\n    const { abbreviation, offset } = zone\n    instance.$z = abbreviation\n    instance.$o = offset\n  } else {\n    // If the time zone was applied to a zone-less input string only\n    // to convert it to UTC, update date parts in the local time zone.\n    instance.$Y = date.getFullYear()\n    instance.$M = date.getMonth()\n    instance.$D = date.getDate()\n    instance.$W = date.getDay()\n    instance.$H = date.getHours()\n    instance.$m = date.getMinutes()\n  }\n}\n\nfunction padToTwoDigits(number) {\n  return number > 9 ? number : `0${number}`\n}\n\nfunction formatTimeZoneOffset(offset, separator) {\n  let sign\n  if (offset <= 0) {\n    offset = -offset\n    sign = '+'\n  } else {\n    sign = '-'\n  }\n  const hours = padToTwoDigits(Math.floor(offset / 60))\n  const minutes = padToTwoDigits(offset % 60)\n  return sign + hours + separator + minutes\n}\n\nfunction formatTimeZoneTokens(instance, format) {\n  const str = format || FORMAT_DEFAULT\n  return str.replace(/z|ZZ|Z/g, (match) => {\n    switch (match) {\n      case 'z':\n        return `[${instance.$z}]`\n      case 'Z':\n        return formatTimeZoneOffset(instance.$o, ':')\n      default: // 'ZZ'\n        return formatTimeZoneOffset(instance.$o, '')\n    }\n  })\n}\n\nexport default (o, C) => {\n  const proto = C.prototype\n  const oldParse = proto.parse\n  const oldFormat = proto.format\n  proto.parse = function (cfg) {\n    oldParse.call(this, cfg)\n    const { timeZone: timeZoneName, convertTimeZone } = cfg\n    if (timeZoneName) {\n      const date = this.$d\n      try {\n        const timeZone = findTimeZone(timeZoneName)\n        const zonedTime = convertTimeZone\n          // Temporary object created for formatting purposes receives\n          // a date in UTC and needs to convert it to the specified TZ.\n          ? getZonedTime(date, timeZone)\n          // Input string without time zone passed to the constructor\n          // needs to get the specified TZ assigned without conversion.\n          : setTimeZone(date, timeZone, { useUTC: false })\n        updateTime(this, zonedTime, convertTimeZone)\n      } catch (error) {\n        date.setTime(Number.NaN)\n        this.init(cfg)\n      }\n    }\n  }\n  proto.format = function (format, options = {}) {\n    if (typeof format === 'object' && !(format instanceof String)) {\n      options = format\n      format = undefined\n    }\n    const { timeZone } = options\n    let date\n    if (timeZone) {\n      // Run the format on a temporary instance, which will use\n      // the date converted to the specified time zone.\n      date = new C({\n        date: this.$d.valueOf(), locale: this.$L, timeZone, convertTimeZone: true\n      })\n      // Replace tokens supported by this plugin; the rest will\n      // be replaced by the original method.\n      format = formatTimeZoneTokens(date, format)\n    } else {\n      date = this\n    }\n    return oldFormat.call(date, format)\n  }\n}\n","import { populateTimeZones } from 'timezone-support/dist/lookup-convert'\nimport timeZoneData from 'timezone-support/dist/data-1900-2050'\n\npopulateTimeZones(timeZoneData)\n\nexport { default } from './custom'\n","export const SECONDS_A_MINUTE = 60\nexport const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60\nexport const SECONDS_A_DAY = SECONDS_A_HOUR * 24\nexport const SECONDS_A_WEEK = SECONDS_A_DAY * 7\n\nexport const MILLISECONDS_A_SECOND = 1e3\nexport const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND\n\n// English locales\nexport const MS = 'millisecond'\nexport const S = 'second'\nexport const MIN = 'minute'\nexport const H = 'hour'\nexport const D = 'day'\nexport const W = 'week'\nexport const M = 'month'\nexport const Q = 'quarter'\nexport const Y = 'year'\nexport const DATE = 'date'\n\nexport const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ'\n\n// regex\nexport const REGEX_PARSE = /^(\\d{4})-?(\\d{1,2})-?(\\d{0,2})(.*?(\\d{1,2}):(\\d{1,2}):(\\d{1,2}))?.?(\\d{1,3})?$/\nexport const REGEX_FORMAT = /\\[.*?\\]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g\n\nexport const en = {\n  name: 'en',\n  weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n  months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_')\n}\n"],"names":["padToTwoDigits","number","formatTimeZoneOffset","offset","separator","Math","floor","timeZoneData","o","C","proto","prototype","oldParse","parse","oldFormat","format","cfg","call","this","timeZoneName","timeZone","convertTimeZone","date","$d","findTimeZone","instance","year","month","day","dayOfWeek","hours","minutes","epoch","zone","setTime","$Y","$M","$D","$W","$H","$m","abbreviation","$z","$o","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","updateTime","getZonedTime","setTimeZone","useUTC","error","Number","NaN","init","options","String","undefined","valueOf","locale","$L","replace","match"],"mappings":"ydAkCA,SAASA,EAAeC,UACN,EAATA,EAAaA,MAAaA,EAGnC,SAASC,EAAqBC,EAAQC,UAEhCD,GAAU,GACZA,GAAUA,EACH,KAEA,KAEKH,EAAeK,KAAKC,MAAMH,EAAS,KAE3BC,EADNJ,EAAeG,EAAS,+BC5CxBI,YD8DFC,EAAGC,OACXC,EAAQD,EAAEE,UACVC,EAAWF,EAAMG,MACjBC,EAAYJ,EAAMK,OACxBL,EAAMG,MAAQ,SAAUG,GACtBJ,EAASK,KAAKC,KAAMF,OACFG,EAAkCH,EAA5CI,SAAwBC,EAAoBL,EAApBK,mBAC5BF,EAAc,KACVG,EAAOJ,KAAKK,WAEVH,EAAWI,eAAaL,IAxEtC,SAAoBM,IAEjBJ,OADDK,IAAAA,KAAMC,IAAAA,MAAOC,IAAAA,IAAKC,IAAAA,UAAWC,IAAAA,MAAOC,IAAAA,QAASC,IAAAA,MAAOC,IAAAA,KAE9CX,EAAOG,EAASF,MAGtBD,EAAKY,QAAQF,GACTX,EAAiB,CAGnBI,EAASU,GAAKT,EACdD,EAASW,GAAKT,EAAQ,EACtBF,EAASY,GAAKT,EACdH,EAASa,GAAKT,EACdJ,EAASc,GAAKT,EACdL,EAASe,GAAKT,MACNU,EAAyBR,EAAzBQ,aAActC,EAAW8B,EAAX9B,OACtBsB,EAASiB,GAAKD,EACdhB,EAASkB,GAAKxC,OAIdsB,EAASU,GAAKb,EAAKsB,cACnBnB,EAASW,GAAKd,EAAKuB,WACnBpB,EAASY,GAAKf,EAAKwB,UACnBrB,EAASa,GAAKhB,EAAKyB,SACnBtB,EAASc,GAAKjB,EAAK0B,WACnBvB,EAASe,GAAKlB,EAAK2B,aAqDfC,CAAWhC,KAPOG,EAGd8B,eAAa7B,EAAMF,GAGnBgC,cAAY9B,EAAMF,EAAU,CAAEiC,QAAQ,IACdhC,GAC5B,MAAOiC,GACPhC,EAAKY,QAAQqB,OAAOC,UACfC,KAAKzC,MAIhBN,EAAMK,OAAS,SAAUA,EAAQ2C,YAAAA,IAAAA,EAAU,IACnB,iBAAX3C,GAAyBA,aAAkB4C,SACpDD,EAAU3C,EACVA,OAAS6C,OAGPtC,EA7CsBG,EA4ClBL,EAAasC,EAAbtC,gBAEJA,GAGFE,EAAO,IAAIb,EAAE,CACXa,KAAMJ,KAAKK,GAAGsC,UAAWC,OAAQ5C,KAAK6C,GAAI3C,SAAAA,EAAUC,iBAAiB,IAlD/CI,EAsDMH,EAA9BP,GAAoCA,GElFZ,wBF8BjBiD,QAAQ,UAAW,SAACC,UACrBA,OACD,cACQxC,EAASiB,WACjB,WACIxC,EAAqBuB,EAASkB,GAAI,oBAElCzC,EAAqBuB,EAASkB,GAAI,QA+C3CrB,EAAOJ,KAEFJ,EAAUG,KAAKK,EAAMP"}