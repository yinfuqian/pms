{"version":3,"file":"relativeTime.js","sources":["../src/plugin/relativeTime/index.js","../src/constant.js"],"sourcesContent":["import { getPluralFormForCardinalByLocale } from 'fast-plural-rules'\n\nimport * as C from '../../constant'\n\nexport default (o, c, d) => {\n  const proto = c.prototype\n  d.en.relativeTime = {\n    future: 'in %s',\n    past: '%s ago',\n    s: 'a few seconds',\n    m: 'a minute',\n    mm: '%d minutes',\n    h: 'an hour',\n    hh: '%d hours',\n    d: 'a day',\n    dd: '%d days',\n    M: 'a month',\n    MM: '%d months',\n    y: 'a year',\n    yy: '%d years'\n  }\n  // Upgrades the original locale format with the single plural only\n  // {\n  //   future: '...', past: '..,',\n  //   s: '...', m: '...', mm: '...'\n  // }\n  function upgradeSimpleLocale(loc) {\n    // Save wrapper expressions with prepositions\n    const { future, past } = loc\n    // Prepare localized expressions for durations (neither future nor past)\n    const durations = Object.keys(loc).reduce((result, key) => {\n      const kl = key.length\n      // Skip entries in the locale, which do not format numerals (future and past)\n      if (kl <= 2) {\n        // Save the special singular without any number with the single-letter key and the\n        // single plural to be used with any number greater then 1 with the two-letter key\n        const text = loc[key]\n        if (kl === 1) {\n          result[key] = text\n          // Insert singular for objects with plurals declared before singulars\n          const key2 = key + key\n          let plurals = result[key2]\n          if (!plurals) {\n            plurals = result[key2] = [] // eslint-disable-line no-multi-assign\n          }\n          plurals.unshift(text)\n        } else {\n          // Append plural for objects with plurals declared after singulars\n          let plurals = result[key]\n          if (!plurals) {\n            plurals = result[key] = [] // eslint-disable-line no-multi-assign\n          }\n          plurals.push(text)\n        }\n      }\n      // Remove the original locale entry; the original locale object needs\n      // to be retained to prevent upgrading on every formatting call\n      delete loc[key]\n      return result\n    }, {})\n    // Prepare localized expressions for future and past\n    const futures = {}\n    const pasts = {}\n    Object.keys(durations).forEach((key) => {\n      const value = durations[key]\n      if (typeof value === 'string') {\n        // Handle singular texts\n        futures[key] = future.replace('%s', value)\n        pasts[key] = past.replace('%s', value)\n      } else {\n        // Handle plural texts\n        futures[key] = value.map(pluralForm => future.replace('%s', pluralForm))\n        pasts[key] = value.map(pluralForm => past.replace('%s', pluralForm))\n      }\n    })\n    // Set localized expressions for durations, future and past to the locale\n    loc.duration = durations\n    loc.future = futures\n    loc.past = pasts\n  }\n  // Upgrades old locale format to provide compatibility with older\n  // localizations; the grammar may not be correct for fusional languages\n  // {\n  //   duration: { s: '...', m: '...', mm: ['...', '...', ...] },\n  //   future: { ... }, past: { ... }\n  // }\n  function upgradeLocale(loc) {\n    // Do not upgrade already upgraded locales\n    if (loc.s) {\n      upgradeSimpleLocale(loc)\n    }\n  }\n  const fromTo = (input, withoutSuffix, instance, isFrom) => {\n    const locale = instance.$locale()\n    const locs = locale.relativeTime\n    const T = [\n      { l: 's', r: 44, d: C.S },\n      { l: 'm', r: 89 },\n      { l: 'mm', r: 44, d: C.MIN },\n      { l: 'h', r: 89 },\n      { l: 'hh', r: 21, d: C.H },\n      { l: 'd', r: 35 },\n      { l: 'dd', r: 25, d: C.D },\n      { l: 'M', r: 45 },\n      { l: 'MM', r: 10, d: C.M },\n      { l: 'y', r: 17 },\n      { l: 'yy', d: C.Y }\n    ]\n    const Tl = T.length\n    let result\n    let out\n\n    upgradeLocale(locs)\n\n    for (let i = 0; i < Tl; i += 1) {\n      const t = T[i]\n      const unit = t.d\n      if (unit) {\n        result = isFrom\n          ? d(input).diff(instance, unit, true)\n          : instance.diff(input, unit, true)\n      }\n      const abs = Math.ceil(Math.abs(result))\n      const limit = t.r\n      if (abs <= limit || !limit) {\n        let loc\n        // Use the proper source of localization expressions depending\n        // on the requested expression - just duration, future or past\n        if (withoutSuffix) {\n          loc = locs.duration\n        } else if (result > 0) {\n          loc = locs.future\n        } else {\n          loc = locs.past\n        }\n        const key = t.l\n        if (key.length === 1) {\n          // Handle singular using a special text without any number\n          out = loc[key]\n        } else {\n          // Choose the plural form using the index decided by the plural rule\n          const pluralForms = loc[key]\n          const pluralForm = getPluralFormForCardinalByLocale(locale.name, abs)\n          out = pluralForms[pluralForm].replace('%d', abs)\n        }\n        break\n      }\n    }\n    return out\n  }\n  proto.to = function (input, withoutSuffix) {\n    return fromTo(input, withoutSuffix, this, true)\n  }\n  proto.from = function (input, withoutSuffix) {\n    return fromTo(input, withoutSuffix, this)\n  }\n  proto.toNow = function (withoutSuffix) {\n    return this.to(d(), withoutSuffix)\n  }\n  proto.fromNow = function (withoutSuffix) {\n    return this.from(d(), withoutSuffix)\n  }\n}\n","export const SECONDS_A_MINUTE = 60\nexport const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60\nexport const SECONDS_A_DAY = SECONDS_A_HOUR * 24\nexport const SECONDS_A_WEEK = SECONDS_A_DAY * 7\n\nexport const MILLISECONDS_A_SECOND = 1e3\nexport const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND\n\n// English locales\nexport const MS = 'millisecond'\nexport const S = 'second'\nexport const MIN = 'minute'\nexport const H = 'hour'\nexport const D = 'day'\nexport const W = 'week'\nexport const M = 'month'\nexport const Q = 'quarter'\nexport const Y = 'year'\nexport const DATE = 'date'\n\nexport const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ'\n\n// regex\nexport const REGEX_PARSE = /^(\\d{4})-?(\\d{1,2})-?(\\d{0,2})(.*?(\\d{1,2}):(\\d{1,2}):(\\d{1,2}))?.?(\\d{1,3})?$/\nexport const REGEX_FORMAT = /\\[.*?\\]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g\n\nexport const en = {\n  name: 'en',\n  weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n  months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_')\n}\n"],"names":["o","c","d","proto","prototype","upgradeLocale","loc","future","past","durations","futures","pasts","s","Object","keys","reduce","result","key","kl","length","text","key2","plurals","unshift","push","forEach","value","replace","map","pluralForm","duration","en","relativeTime","m","mm","h","hh","dd","M","MM","y","yy","fromTo","input","withoutSuffix","instance","isFrom","out","locale","$locale","locs","T","l","r","Tl","i","t","unit","diff","abs","Math","ceil","limit","getPluralFormForCardinalByLocale","name","to","this","from","toNow","fromNow"],"mappings":"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"}