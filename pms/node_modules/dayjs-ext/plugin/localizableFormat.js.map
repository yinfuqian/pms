{"version":3,"file":"localizableFormat.js","sources":["../src/constant.js","../src/utils.js","../src/plugin/localizableFormat/index.js"],"sourcesContent":["export const SECONDS_A_MINUTE = 60\nexport const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60\nexport const SECONDS_A_DAY = SECONDS_A_HOUR * 24\nexport const SECONDS_A_WEEK = SECONDS_A_DAY * 7\n\nexport const MILLISECONDS_A_SECOND = 1e3\nexport const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND\n\n// English locales\nexport const MS = 'millisecond'\nexport const S = 'second'\nexport const MIN = 'minute'\nexport const H = 'hour'\nexport const D = 'day'\nexport const W = 'week'\nexport const M = 'month'\nexport const Q = 'quarter'\nexport const Y = 'year'\nexport const DATE = 'date'\n\nexport const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ'\n\n// regex\nexport const REGEX_PARSE = /^(\\d{4})-?(\\d{1,2})-?(\\d{0,2})(.*?(\\d{1,2}):(\\d{1,2}):(\\d{1,2}))?.?(\\d{1,3})?$/\nexport const REGEX_FORMAT = /\\[.*?\\]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g\n\nexport const en = {\n  name: 'en',\n  weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n  months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_')\n}\n","import * as C from './constant'\n\nconst padStart = (string, length, pad) => {\n  const s = String(string)\n  if (!s || s.length >= length) return string\n  return `${Array((length + 1) - s.length).join(pad)}${string}`\n}\n\nconst padZoneStr = (negMinuts) => {\n  const minutes = Math.abs(negMinuts)\n  const hourOffset = Math.floor(minutes / 60)\n  const minuteOffset = minutes % 60\n  return `${negMinuts <= 0 ? '+' : '-'}${padStart(hourOffset, 2, '0')}:${padStart(minuteOffset, 2, '0')}`\n}\n\nconst monthDiff = (a, b) => {\n  // function from moment.js in order to keep the same result\n  const wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month())\n  const anchor = a.clone().add(wholeMonthDiff, 'months')\n  const c = b - anchor < 0\n  const anchor2 = a.clone().add(wholeMonthDiff + (c ? -1 : 1), 'months')\n  // eslint-disable-next-line\n  const diff = Number(-(wholeMonthDiff + ((b - anchor) / (c ? (anchor - anchor2) : (anchor2 - anchor)))))\n  if (Math.abs(diff) === 0) {\n    return 0\n  }\n  return diff\n}\n\nconst absFloor = n => (n < 0 ? Math.ceil(n) || 0 : Math.floor(n))\n\nconst prettyUnit = (u) => {\n  const special = {\n    M: C.M,\n    y: C.Y,\n    w: C.W,\n    d: C.D,\n    h: C.H,\n    m: C.MIN,\n    s: C.S,\n    ms: C.MS\n  }\n  return special[u] || String(u || '').toLowerCase().replace(/s$/, '')\n}\n\nconst isUndefined = s => s === undefined\n\nexport default {\n  padStart,\n  padZoneStr,\n  monthDiff,\n  absFloor,\n  prettyUnit,\n  isUndefined\n}\n","import { FORMAT_DEFAULT } from '../../constant'\nimport Utils from '../../utils'\n\nexport default (o, c, d) => {\n  const proto = c.prototype\n  const oldParse = proto.parse\n  const oldFormat = proto.format\n  const englishFormats = {\n    LTS: 'h:mm:ss A',\n    LT: 'h:mm A',\n    L: 'MM/DD/YYYY',\n    LL: 'MMMM D, YYYY',\n    LLL: 'MMMM D, YYYY h:mm A',\n    LLLL: 'dddd, MMMM D, YYYY h:mm A'\n  }\n  d.en.formats = englishFormats\n  proto.parse = function (cfg) {\n    const format = cfg && cfg.format\n    if (format) {\n      const locale = Utils.getLocale(cfg.locale)\n      const formats = locale.formats || {}\n      cfg.format = format.replace(/LTS|LT|L/g, match =>\n        formats[match] || englishFormats[match])\n    }\n    oldParse.call(this, cfg)\n  }\n  proto.format = function (formatStr) {\n    const locale = this.$locale()\n    const formats = locale.formats || {}\n    const str = formatStr || FORMAT_DEFAULT\n    const result = str.replace(/LTS|LT|L{1,4}/g, match =>\n      formats[match] || englishFormats[match])\n    return oldFormat.call(this, result)\n  }\n}\n"],"names":["padStart","string","length","pad","s","String","Array","join","padZoneStr","negMinuts","minutes","Math","abs","hourOffset","floor","minuteOffset","monthDiff","a","b","wholeMonthDiff","year","month","anchor","clone","add","c","anchor2","diff","Number","absFloor","n","ceil","prettyUnit","u","M","y","w","d","h","m","ms","toLowerCase","replace","isUndefined","undefined","o","proto","prototype","oldParse","parse","oldFormat","format","englishFormats","LTS","LT","L","LL","LLL","LLLL","en","formats","cfg","Utils","getLocale","locale","match","call","this","formatStr","$locale","result"],"mappings":"0MAYO,ICVDA,EAAW,SAACC,EAAQC,EAAQC,OAC1BC,EAAIC,OAAOJ,UACZG,GAAKA,EAAEF,QAAUA,EAAeD,KAC3BK,MAAOJ,EAAS,EAAKE,EAAEF,QAAQK,KAAKJ,GAAOF,KA0CxC,CACbD,SAAAA,EACAQ,WAzCiB,SAACC,OACZC,EAAUC,KAAKC,IAAIH,GACnBI,EAAaF,KAAKG,MAAMJ,EAAU,IAClCK,EAAeL,EAAU,UACrBD,GAAa,EAAI,IAAM,KAAMT,EAASa,EAAY,EAAG,SAAQb,EAASe,EAAc,EAAG,MAsCjGC,UAnCgB,SAACC,EAAGC,OAEdC,EAA0C,IAAvBD,EAAEE,OAASH,EAAEG,SAAiBF,EAAEG,QAAUJ,EAAEI,SAC/DC,EAASL,EAAEM,QAAQC,IAAIL,EAAgB,UACvCM,EAAIP,EAAII,EAAS,EACjBI,EAAUT,EAAEM,QAAQC,IAAIL,GAAkBM,GAAK,EAAI,GAAI,UAEvDE,EAAOC,SAAST,GAAmBD,EAAII,IAAWG,EAAKH,EAASI,EAAYA,EAAUJ,YACrE,IAAnBX,KAAKC,IAAIe,GACJ,EAEFA,GAyBPE,SAtBe,SAAAC,UAAMA,EAAI,EAAInB,KAAKoB,KAAKD,IAAM,EAAInB,KAAKG,MAAMgB,IAuB5DE,WArBiB,SAACC,SACF,CACdC,EDfa,QCgBbC,EDda,OCebC,EDlBa,OCmBbC,EDpBa,MCqBbC,EDtBa,OCuBbC,EDxBe,SCyBfnC,ED1Ba,SC2BboC,GD5Bc,eC8BDP,IAAM5B,OAAO4B,GAAK,IAAIQ,cAAcC,QAAQ,KAAM,KAWjEC,YARkB,SAAAvC,eAAWwC,IAANxC,oBC1CTyC,EAAGpB,EAAGY,OACdS,EAAQrB,EAAEsB,UACVC,EAAWF,EAAMG,MACjBC,EAAYJ,EAAMK,OAClBC,EAAiB,CACrBC,IAAK,YACLC,GAAI,SACJC,EAAG,aACHC,GAAI,eACJC,IAAK,sBACLC,KAAM,6BAERrB,EAAEsB,GAAGC,QAAUR,EACfN,EAAMG,MAAQ,SAAUY,OAChBV,EAASU,GAAOA,EAAIV,UACtBA,EAAQ,KAEJS,EADSE,EAAMC,UAAUF,EAAIG,QACZJ,SAAW,GAClCC,EAAIV,OAASA,EAAOT,QAAQ,YAAa,SAAAuB,UACvCL,EAAQK,IAAUb,EAAea,KAErCjB,EAASkB,KAAKC,KAAMN,IAEtBf,EAAMK,OAAS,SAAUiB,OAEjBR,EADSO,KAAKE,UACGT,SAAW,GAE5BU,GADMF,GFNc,wBEOP1B,QAAQ,iBAAkB,SAAAuB,UAC3CL,EAAQK,IAAUb,EAAea,YAC5Bf,EAAUgB,KAAKC,KAAMG"}